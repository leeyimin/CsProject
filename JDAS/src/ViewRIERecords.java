/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ViewRIERecords.java
 *
 * Created on Apr 22, 2014, 2:44:03 PM
 */

import java.sql.*;
import javax.swing.table.*;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author irham rasyidi
 */
public class ViewRIERecords extends javax.swing.JFrame {

    Controller cont;
    ArrayList<String> categories;
    /** Creates new form ViewRIERecords */
    public ViewRIERecords( Controller cont ) throws SQLException {
        
        this.cont = cont;

        ResultSet rs = cont.getResultSet("select * from records;"); //TODO correct?
        ResultSetMetaData rsmd = rs.getMetaData();
        int columnCount = rsmd.getColumnCount();

        categories = new ArrayList<String>(columnCount+1);
        categories.add("All");
        // The column count starts from 1
        for (int i = 1; i < columnCount + 1; i++ ) {
            categories.add(rsmd.getColumnName(i));   
        } //used to initiate combo box

        updateTable(rs);

        initComponents();
    
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        setTitle("View RIE Records");

        jLabel1.setText("Category:");

        jComboBox1.setModel(new DefaultComboBoxModel(categories.toArray()));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null}
            },
            new String [] {
                "Select a Category"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 481, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBox1, 0, 422, Short.MAX_VALUE)))

                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jComboBox1, 0, 492, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 564, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        int index = jComboBox1.getSelectedIndex();
        String[] queries = new String[]{
            "SELECT * FROM RECORDS;", 
            "SELECT ID, USERID, DESC1, YEAR FROM RIERECORDS WHERE CATEGORY = 14;",
            "SELECT ID, USERID, DESC1, YEAR FROM RIERECORDS WHERE CATEGORY = 15;",
            "SELECT ID, USERID, DESC1, AWARD, YEAR FROM RIERECORDS WHERE CATEGORY = 16;",
            "SELECT ID, USERID, DESC1, YEAR FROM RIERECORDS WHERE CATEGORY = 17;",
            "SELECT ID, USERID, TITLE, DES1, YEAR FROM RIERECORDS WHERE CATEGORY = 18 OR CATEGORY = 19;",
            "SELECT ID, USERID, DESC1, YEAR FROM RIERECORDS WHERE CATEGORY = 20;"
        };

        updateTable( cont.getResultSet( queries[index] ) );

        if( index == 5 ) checkForDiscrepancies();

        try{
            updateTable( cont.getResultSet( queries[index] ) );
        }
        catch( Exception exp ){}

    }//GEN-LAST:event_jComboBox1ActionPerformed

    public void checkForDiscrepancies(){
        int id = -1, title = -1, desc = -1;
        int column = jTable1.getColumnCount(), row = jTable1.getRowCount();
        for( int a = 0; a < column; a++ ){
            if( jTable1.getColumnName(a).equals( "title" ) )
                title = a;
            if( jTable1.getColumnName(a).equals( "id" ) )
                id = a;
            if( jTable1.getColumnName(a).equals( "desc1" ) )
                desc = a;
        }

        if( title == -1 || id == -1 || desc == -1 ) return;
        //Perhaps an exception

        ArrayList< String[] > records = new ArrayList< String[] >();
        String[] nextRecord = new String[3];

        for( int a = 0; a < row; a++ ){
            nextRecord[0] = (String) jTable1.getModel().getValueAt( a, id );
            nextRecord[1] = (String) jTable1.getModel().getValueAt( a, title );
            nextRecord[2] = (String) jTable1.getModel().getValueAt( a, desc );
            records.add( nextRecord );
        }

        Collections.sort( records, new Comparator<String[]>(){
            public int compare( String[] a, String[] b ){
                return a[1].compareTo( b[1] );
            }
        });

        int reference, end;
        boolean disc;
        ArrayList<Integer> toColour = new ArrayList<Integer>();
        for( int a = 0; a < row; a++ ){
            reference = a;
            disc = false;

            for( end = a+1; end < row && records.get( reference )[1].equals( records.get( end )[1] ); end++ ){
                if( disc ) continue;
                if( !records.get( reference )[2].equals( records.get( end )[2] ) )
                    disc = true;
            }

            if( disc ){
                for( int i = reference; i < end; i++ )
                    toColour.add( Integer.parseInt( records.get(i)[0] ) );
            }

            a = end;
        }

        Collections.sort( toColour );

        Integer rowID;
        for( int a = 0; a < row; a++ ){
            rowID = Integer.parseInt( (String) jTable1.getModel().getValueAt( a, id ) );
            if( rowID == toColour.get( Arrays.binarySearch( toColour.toArray(), rowID ) ) )
                
        }

        //TODO to be implemented
    }

    private void updateTable( ResultSet resultSet ){
        try{
            DefaultTableModel dtm = new DefaultTableModel(){
                @Override
                public boolean isCellEditable( int row, int column ){
                    return true;
                }
            };

            Vector<Object> nextRow = new Vector<Object>();

            while( resultSet.next() ){
                for( int a = 1; a <= dtm.getColumnCount(); a++ )
                    nextRow.add( resultSet.getString(a) );

                dtm.addRow( nextRow.toArray() );
                nextRow.clear();
            }

            jTable1.setModel( dtm );
            DefaultTableColumnModel dtcm = (DefaultTableColumnModel) jTable1.getColumnModel();

            for( int a = 0; a < resultSet.getMetaData().getColumnCount(); a++ ){
                dtcm.getColumn(a).setHeaderValue( resultSet.getMetaData().getColumnName(a+1) );
            }
        }
        catch( SQLException exp ){}
    }
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new ViewRIERecords().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

}
