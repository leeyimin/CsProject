
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Observer;
import java.util.Vector;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author irham rasyidi
 */
public class ViewStudentRecords extends javax.swing.JFrame {

    /**
     * Creates new form ViewStudentRecords
     */
    Controller cont;
    DefaultTableColumnModel dtcm;
    
    public ViewStudentRecords( Controller cont ) throws SQLException {
        initComponents();
        
        this.cont = cont;
        jTable1.setDefaultRenderer( Object.class, new CellColourer() );
        
        refresh();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Student Records");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Student Details"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Done");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    
    private void refresh(){
        ResultSet rs = cont.getResultSet( "SELECT * FROM STUDENTRECORDS" );
        updateTable( rs );
        noArpCheck();
        jTable1.repaint();
    }
    
    private void updateTable( ResultSet resultSet ){
        ( (CellColourer) jTable1.getDefaultRenderer( Object.class ) ).clearDiscrepancies();
        try{
            DefaultTableModel dtm = new DefaultTableModel(){
                @Override
                public boolean isCellEditable( int row, int column ){
                    if (column <3) return false;
                    else return true;
                }
            };

            Vector<Object> nextRow = new Vector<Object>();

            int colCount = resultSet.getMetaData().getColumnCount();
            
            dtm.setColumnCount(colCount);
            
            while( resultSet.next() ) { 
                for( int a = 1; a <= colCount; a++ ) {
                    nextRow.add(resultSet.getString(a));
                }

                dtm.addRow( nextRow.toArray() );
                nextRow.clear();
            } 

            jTable1.setModel( dtm );
            dtcm = (DefaultTableColumnModel) jTable1.getColumnModel();

            for( int a = 0; a < resultSet.getMetaData().getColumnCount(); a++ ){
                dtcm.getColumn(a).setHeaderValue( resultSet.getMetaData().getColumnName(a+1) );
            }
        }
        catch( SQLException exp ){
            System.out.println(exp);
        }
    }
    
    public void noArpCheck(){
        System.out.println( "Checking for students with no ARP records" );
        ResultSet rs = cont.getResultSet( "SELECT STUDENTID FROM STUDENTRECORDS WHERE STUDENTID NOT IN ( SELECT DISTINCT USERID FROM RIERECORDS WHERE CATEGORY = 18 );" );
        
        ArrayList<String> escapees = new ArrayList<>();
        
        try{
            while( rs.next() )
                escapees.add( rs.getString( "STUDENTID"  ) );
        }
        catch( SQLException ex ){}
            
        Collections.sort( escapees );
        
        ArrayList<Integer> toColour = new ArrayList<>();
        for( int a = 0; a < jTable1.getRowCount(); a++ ){
            System.out.println( jTable1.getModel().getValueAt(a, 0) );
            if( Arrays.binarySearch( escapees.toArray(), (String) jTable1.getModel().getValueAt( a, 0 ) ) >= 0 )
                toColour.add(a);
        }
        
        ( (CellColourer) jTable1.getDefaultRenderer( Object.class ) ).setDiscrepancies( toColour );
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
